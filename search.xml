<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/12/hello-world/"/>
      <url>/2024/06/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出图的BFS和DFS</title>
      <link href="/2024/06/12/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%9B%BE%E7%9A%84BFS%E5%92%8CDFS/"/>
      <url>/2024/06/12/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%9B%BE%E7%9A%84BFS%E5%92%8CDFS/</url>
      
        <content type="html"><![CDATA[<h1 id="深入浅出理解-图的-DFS-和-BFS"><a href="#深入浅出理解-图的-DFS-和-BFS" class="headerlink" title="深入浅出理解 图的 DFS 和 BFS"></a>深入浅出理解 图的 DFS 和 BFS</h1><hr><h2 id="一、邻接表法建立图"><a href="#一、邻接表法建立图" class="headerlink" title="一、邻接表法建立图"></a>一、邻接表法建立图</h2><p>创建图的方法有邻接矩阵和邻接表法。</p><blockquote><ul><li><font color = "#0x552266"> 邻接矩阵把边的关系包含在一个矩阵中，虽然很方便，但是，当图中的定点数远大于边数时，浪费了很大的空间。</li><li><font color = "#0x552266">邻接表把边与顶点的关系存在一个叫弧（边）的数据结构中，有几条边就创建几条弧。节省了内存空间，但也怎加了对各种结构体之间关系的理解难度。</li><li><font color = "#0x552266">其实图的DFS和BFS就算法上来看，是非常简单的，但是要很流利的写出图的这两种遍历的算法，要对结构体之间关系有较好的理解。</li></ul></blockquote><p>下面先来看数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>DG,DN,UDG,UDN&#125;GraphyType; <span class="comment">//图的种类</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>  //弧结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> adjVerxIndex;    <span class="comment">//该弧指向的顶点在图中顶点数组的下标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>* <span class="title">nextArc</span>;</span>  <span class="comment">//该弧在邻接表中的下一条弧</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span>  //顶点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> data;   <span class="comment">//顶点数据</span></span><br><span class="line">ArcNode* firstArc;   <span class="comment">//该顶点相连的第一条弧</span></span><br><span class="line">&#125;VertexNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graphy</span> //邻接表（图）</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VertexNode vertex[MAXSIZE];</span><br><span class="line"><span class="type">int</span> verNum,arcNum;</span><br><span class="line">GraphyType type;<span class="comment">//图的种类，若要简单可以舍去这一项</span></span><br><span class="line">&#125;*AdjList;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再来看如何创建图：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Locate</span><span class="params">(AdjList adj , <span class="type">char</span> des)</span> <span class="comment">//通过顶点数据找到顶点下标</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; adj-&gt;verNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(des == adj-&gt;vertex[i].data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatAdjList</span><span class="params">(AdjList* adj)</span><span class="comment">//创建图</span></span><br><span class="line">&#123;</span><br><span class="line">*adj = (AdjList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(graphy));</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入顶点数：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(*adj)-&gt;verNum;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入边数：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(*adj)-&gt;arcNum;</span><br><span class="line">(*adj)-&gt;type = DN;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请依次输入顶点的值：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (*adj)-&gt;verNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(*adj)-&gt;vertex[i].data;</span><br><span class="line">(*adj)-&gt;vertex[i].firstArc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (*adj)-&gt;arcNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> start,end;</span><br><span class="line"><span class="type">int</span> ixS,ixE;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;条边的两个顶点值：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;start&gt;&gt;end;</span><br><span class="line">ixS = Locate(*adj,start);</span><br><span class="line">ixE = Locate(*adj,end);</span><br><span class="line">ArcNode* node = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">node-&gt;nextArc = (*adj)-&gt;vertex[ixS].firstArc;</span><br><span class="line">node-&gt;adjVerxIndex = ixE;</span><br><span class="line">(*adj)-&gt;vertex[ixS].firstArc = node;<span class="comment">//头插法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么难以理解的，就是把图结构体中的变量初始化，唯一要注意的是，在创建边的时候，采用头插还是尾插的方法对最后遍历结果有一定影响，实际上先遍历哪一个邻接点都没有关系，所以图的两种遍历结果其实都是不唯一的，只要某些关键点的前后顺序一致就行了。</p><hr><h2 id="二、图的深度优先遍历（DFS）"><a href="#二、图的深度优先遍历（DFS）" class="headerlink" title="二、图的深度优先遍历（DFS）"></a>二、图的深度优先遍历（DFS）</h2><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a><font color = "#0x6600ff" size = "4px"><em><strong>算法分析</strong></em></h3><p>图的深度优先遍历其实就是通常说的回溯，一般用递归实现，做法是依次对每个未访问的结点做DFS。</p><p>DFS：访问该顶点，然后<strong>在一个循环中分别对每一个邻接点做DFS</strong>,直到所有邻接点都已做完DFS返回，可见DFS使用了递归。</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dfs</span><span class="params">(AdjList adj, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;adj-&gt;vertex[i].data&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">flag[i] = <span class="literal">true</span>;</span><br><span class="line">ArcNode* p = adj-&gt;vertex[i].firstArc; </span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line">Dfs(adj,p-&gt;adjVerxIndex);</span><br><span class="line">p = p-&gt;nextArc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、图的广度优先遍历（BFS）"><a href="#三、图的广度优先遍历（BFS）" class="headerlink" title="三、图的广度优先遍历（BFS）"></a>三、图的广度优先遍历（BFS）</h2><h3 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a><font color = "#0x6600ff" size = "4px"><em><strong>算法分析</strong></em></h3><ol><li>图的广度优先遍历一般用队列来实现，和深度优先遍历一样，依次对图中每一个未访问的顶点做BFS.</li><li>BFS：访问一个节点之前，现将这个顶点入队，然后在访问，访问完毕之后，将他的<strong>所有邻接点入队</strong>。然后判断队列是否为空，若为空则表示访问完毕，退出循环，可见BFS未用递归。</li></ol><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Bfs</span><span class="params">(AdjList adj,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">q.push(i);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag[q.front()])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;adj-&gt;vertex[q.front()].data&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">    flag[q.front()] = <span class="literal">true</span>;    </span><br><span class="line">&#125;</span><br><span class="line">ArcNode* p = adj-&gt;vertex[q.front()].firstArc;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">q.push(p-&gt;adjVerxIndex);</span><br><span class="line">p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h2 id="四、整体实现及测试结果"><a href="#四、整体实现及测试结果" class="headerlink" title="四、整体实现及测试结果"></a>四、整体实现及测试结果</h2><h3 id="1-画图分析："><a href="#1-画图分析：" class="headerlink" title="1. 画图分析："></a>1. 画图分析：</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODAzMTQwOTAxODkx?x-oss-process=image/format,png" alt="图"></p><h3 id="2-整体代码："><a href="#2-整体代码：" class="headerlink" title="2. 整体代码："></a>2. 整体代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 20</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>DG,DN,UDG,UDN&#125;GraphyType;</span><br><span class="line"><span class="type">bool</span> flag[MAXSIZE] = &#123;<span class="literal">false</span>&#125;; </span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> adjVerxIndex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>* <span class="title">nextArc</span>;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">ArcNode* firstArc;</span><br><span class="line">&#125;VertexNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graphy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VertexNode vertex[MAXSIZE];</span><br><span class="line"><span class="type">int</span> verNum,arcNum;</span><br><span class="line">GraphyType type;</span><br><span class="line">&#125;*AdjList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dfs</span><span class="params">(AdjList adj, <span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Bfs</span><span class="params">(AdjList adj,<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Locate</span><span class="params">(AdjList adj , <span class="type">char</span> des)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; adj-&gt;verNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(des == adj-&gt;vertex[i].data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatAdjList</span><span class="params">(AdjList* adj)</span></span><br><span class="line">&#123;</span><br><span class="line">*adj = (AdjList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(graphy));</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入顶点数：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(*adj)-&gt;verNum;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入边数：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(*adj)-&gt;arcNum;</span><br><span class="line">(*adj)-&gt;type = DN;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请依次输入顶点的值：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (*adj)-&gt;verNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(*adj)-&gt;vertex[i].data;</span><br><span class="line">(*adj)-&gt;vertex[i].firstArc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (*adj)-&gt;arcNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> start,end;</span><br><span class="line"><span class="type">int</span> ixS,ixE;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;条边的两个顶点值：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;start&gt;&gt;end;</span><br><span class="line">ixS = Locate(*adj,start);</span><br><span class="line">ixE = Locate(*adj,end);</span><br><span class="line">ArcNode* node = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">node-&gt;nextArc = (*adj)-&gt;vertex[ixS].firstArc;</span><br><span class="line">node-&gt;adjVerxIndex = ixE;</span><br><span class="line">(*adj)-&gt;vertex[ixS].firstArc = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(AdjList adj)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; adj-&gt;verNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;DFS:&quot;</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    Dfs(adj,i);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(flag,<span class="number">0</span>,MAXSIZE);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; adj-&gt;verNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;BFS:&quot;</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    Bfs(adj,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Dfs</span><span class="params">(AdjList adj, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;adj-&gt;vertex[i].data&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">flag[i] = <span class="literal">true</span>;</span><br><span class="line">ArcNode* p = adj-&gt;vertex[i].firstArc; </span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line">Dfs(adj,p-&gt;adjVerxIndex);</span><br><span class="line">p = p-&gt;nextArc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Bfs</span><span class="params">(AdjList adj,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">q.push(i);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag[q.front()])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;adj-&gt;vertex[q.front()].data&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">    flag[q.front()] = <span class="literal">true</span>;    </span><br><span class="line">&#125;</span><br><span class="line">ArcNode* p = adj-&gt;vertex[q.front()].firstArc;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">q.push(p-&gt;adjVerxIndex);</span><br><span class="line">p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">AdjList adj;</span><br><span class="line">    CreatAdjList(&amp;adj);</span><br><span class="line">    Print(adj);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="3-结果："><a href="#3-结果：" class="headerlink" title="3.结果："></a>3.结果：</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODAzMTQxMjM5NTMy?x-oss-process=image/format,png" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
